library(dplyr)
library(readr)
library(stringr)
library(hflights)
library(tidyr)
library(lubridate)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
data <- read_csv("../data/spotify_songs.csv")
data$playlist_name <- factor(data$playlist_name)
data$playlist_genre <- factor(data$playlist_genre)
data$playlist_subgenre <- factor(data$playlist_subgenre)
data$mode <- factor(data$mode)
data
library(dplyr)
library(readr)
library(stringr)
library(hflights)
library(tidyr)
library(lubridate)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
data <- read_csv("../data/spotify_songs.csv")
data$playlist_name <- factor(data$playlist_name)
data$playlist_genre <- factor(data$playlist_genre)
data$playlist_subgenre <- factor(data$playlist_subgenre)
data$mode <- factor(data$mode)
data
getwd()
setwd("/Users/dominik/Desktop/OSP_projekt/OSPROJEKT")
getwd()
data <- read_csv("./data/spotify_songs.csv")
getwd()
data <- read_csv("../data/spotify_songs.csv")
data <- read_csv("../data/spotify_songs.csv")
data
data <- read_csv("../data/spotify_songs.csv")
tail(data, 20)
data <- read_csv("../data/spotify_songs.csv")
# track_id, track_name, track_artist, track_popularity, track_album_release_date, playlist_genre, duration_ms
data <- data[c("track_id", "track_name", "track_artist", "track_popularity", "track_album_release_date", "playlist_genre", "duration_ms")]
data
data <- read_csv("../data/spotify_songs.csv")
data <- data[c("track_id", "track_name", "track_artist", "track_popularity", "track_album_release_date", "playlist_genre", "duration_ms")]
# Preimenovanje stupaca
data <- data %>%
rename(
TrackID = track_id,
TrackName = track_name,
Artist = track_artist,
Popularity = track_popularity,
ReleaseDate = track_album_release_date,
Genre = playlist_genre,
DurationMS = duration_ms
)
# Prikazivanje ažuriranog dataframe-a
data
data <- read_csv("../data/spotify_songs.csv")
data <- data[c("track_id", "track_name", "track_artist", "track_popularity", "track_album_release_date", "playlist_genre", "duration_ms")]
# Preimenovanje stupaca
data <- data %>%
rename(
TrackID = track_id,
TrackName = track_name,
Artist = track_artist,
Popularity = track_popularity,
ReleaseDate = track_album_release_date,
Genre = playlist_genre,
DurationMin = duration_ms
)
# Prikazivanje ažuriranog dataframe-a
data
data <- read_csv("../data/spotify_songs.csv")
data <- data[c("track_id", "track_name", "track_artist", "track_popularity", "track_album_release_date", "playlist_genre", "duration_ms")]
# Preimenovanje stupaca
data <- data %>%
rename(
TrackID = track_id,
TrackName = track_name,
Artist = track_artist,
Popularity = track_popularity,
ReleaseDate = track_album_release_date,
Genre = playlist_genre,
DurationMin = duration_ms
)
data <- data %>%
mutate(DurationMin = DurationMS / 60000)
data <- read_csv("../data/spotify_songs.csv")
data <- data[c("track_id", "track_name", "track_artist", "track_popularity", "track_album_release_date", "playlist_genre", "duration_ms")]
# Preimenovanje stupaca
data <- data %>%
rename(
TrackID = track_id,
TrackName = track_name,
Artist = track_artist,
Popularity = track_popularity,
ReleaseDate = track_album_release_date,
Genre = playlist_genre,
DurationMin = duration_ms
)
data$DurationMin <- data$DurationMin / 60000
# Prikazivanje ažuriranog dataframe-a
data
data <- read_csv("../data/spotify_songs.csv")
data <- data[c("track_id", "track_name", "track_artist", "track_popularity", "track_album_release_date", "playlist_genre", "duration_ms")]
# Preimenovanje stupaca
data <- data %>%
rename(
TrackID = track_id,
TrackName = track_name,
Artist = track_artist,
Popularity = track_popularity,
ReleaseDate = track_album_release_date,
Genre = playlist_genre,
DurationMin = duration_ms
)
# pretvorba trajanja u minute a ne milisekunde
data$DurationMin <- data$DurationMin / 60000
# Prikazivanje ažuriranog dataframe-a
glimpse(data)
head(data)
data <- read_csv("../data/spotify_songs.csv")
data <- data[c("track_id", "track_name", "track_artist", "track_popularity", "track_album_release_date", "playlist_genre", "duration_ms")]
# Preimenovanje stupaca
data <- data %>%
rename(
TrackID = track_id,
TrackName = track_name,
Artist = track_artist,
Popularity = track_popularity,
ReleaseDate = track_album_release_date,
Genre = playlist_genre,
DurationMin = duration_ms
)
# pretvorba trajanja u minute a ne milisekunde
data$DurationMin <- data$DurationMin / 60000
# faktorizacija
data$Artist <- as.factor(data$Artist)
data$Genre <- as.factor(data$Genre)
# pretvorba na Date
data$ReleaseDate <- ymd(data$ReleaseDate)
# pretvorba trajanja
data$DurationMin <- ms(data$DurationMin)
# Prikazivanje ažuriranog dataframe-a
#glimpse(data)
head(data)
data <- read_csv("../data/spotify_songs.csv")
data <- data[c("track_id", "track_name", "track_artist", "track_popularity", "track_album_release_date", "playlist_genre", "duration_ms")]
# Preimenovanje stupaca
data <- data %>%
rename(
TrackID = track_id,
TrackName = track_name,
Artist = track_artist,
Popularity = track_popularity,
ReleaseDate = track_album_release_date,
Genre = playlist_genre,
DurationMin = duration_ms
)
# pretvorba trajanja u minute a ne milisekunde
data$DurationMin <- data$DurationMin / 60000
data$DurationMin <- round(data$DurationMin, 2)
# faktorizacija
data$Artist <- as.factor(data$Artist)
data$Genre <- as.factor(data$Genre)
# pretvorba na Date
data$ReleaseDate <- ymd(data$ReleaseDate)
# pretvorba trajanja
data$DurationMin <- ms(data$DurationMin)
# Prikazivanje ažuriranog dataframe-a
#glimpse(data)
head(data)
data <- read_csv("../data/spotify_songs.csv")
data <- data[c("track_id", "track_name", "track_artist", "track_popularity", "track_album_release_date", "playlist_genre", "duration_ms")]
# Preimenovanje stupaca
data <- data %>%
rename(
TrackID = track_id,
TrackName = track_name,
Artist = track_artist,
Popularity = track_popularity,
ReleaseDate = track_album_release_date,
Genre = playlist_genre,
DurationMin = duration_ms
)
# pretvorba trajanja u minute a ne milisekunde
data$DurationMin <- data$DurationMin / 60000
data$DurationMin <- round(data$DurationMin, 2)
# faktorizacija
data$Artist <- as.factor(data$Artist)
data$Genre <- as.factor(data$Genre)
# pretvorba na Date
data$ReleaseDate <- ymd(data$ReleaseDate)
# Prikazivanje ažuriranog dataframe-a
#glimpse(data)
head(data)
data <- read_csv("../data/spotify_songs.csv")
data <- data[c("track_id", "track_name", "track_artist", "track_popularity", "track_album_release_date", "playlist_genre", "duration_ms")]
# Preimenovanje stupaca
data <- data %>%
rename(
TrackID = track_id,
TrackName = track_name,
Artist = track_artist,
Popularity = track_popularity,
ReleaseDate = track_album_release_date,
Genre = playlist_genre,
DurationMin = duration_ms
)
# pretvorba trajanja u minute a ne milisekunde
data$DurationMin <- data$DurationMin / 60000
data$DurationMin <- round(data$DurationMin, 2)
# faktorizacija
data$Artist <- as.factor(data$Artist)
data$Genre <- as.factor(data$Genre)
# pretvorba na Date
data$ReleaseDate <- ymd(data$ReleaseDate)
convertToMinSec <- function(decimalMinutes) {
minutes <- floor(decimalMinutes)
seconds <- round((decimalMinutes - minutes) * 60)
return(paste(minutes, "min", seconds, "sec"))
}
# Primjena funkcije na DurationMin stupac
data$DurationMin <- sapply(data$DurationMin, convertToMinSec)
# Prikaz ažuriranog stupca
data$DurationMin
# Prikazivanje ažuriranog dataframe-a
#glimpse(data)
head(data)
data <- read_csv("../data/spotify_songs.csv")
data <- data[c("track_id", "track_name", "track_artist", "track_popularity", "track_album_release_date", "playlist_genre", "duration_ms")]
# Preimenovanje stupaca
data <- data %>%
rename(
TrackID = track_id,
TrackName = track_name,
Artist = track_artist,
Popularity = track_popularity,
ReleaseDate = track_album_release_date,
Genre = playlist_genre,
DurationMin = duration_ms
)
# pretvorba trajanja u minute a ne milisekunde
data$DurationMin <- data$DurationMin / 60000
data$DurationMin <- round(data$DurationMin, 2)
# faktorizacija
data$Artist <- as.factor(data$Artist)
data$Genre <- as.factor(data$Genre)
# pretvorba na Date
data$ReleaseDate <- ymd(data$ReleaseDate)
# Prikazivanje ažuriranog dataframe-a
#glimpse(data)
head(data)
data <- read_csv("../data/spotify_songs.csv")
data <- data[c("track_id", "track_name", "track_artist", "track_popularity", "track_album_release_date", "playlist_genre", "duration_ms")]
# Preimenovanje stupaca
data <- data %>%
rename(
TrackID = track_id,
TrackName = track_name,
Artist = track_artist,
Popularity = track_popularity,
ReleaseDate = track_album_release_date,
Genre = playlist_genre,
DurationMin = duration_ms
)
# pretvorba trajanja u minute a ne milisekunde
data$DurationMin <- data$DurationMin / 60000
data$DurationMin <- round(data$DurationMin, 2)
# faktorizacija
data$Artist <- as.factor(data$Artist)
data$Genre <- as.factor(data$Genre)
# pretvorba na Date
data$ReleaseDate <- ymd(data$ReleaseDate)
# Prikazivanje ažuriranog dataframe-a
#glimpse(data)
head(data)
data <- read_csv("../data/spotify_songs.csv")
data <- data[c("track_id", "track_name", "track_artist", "track_popularity", "track_album_release_date", "playlist_genre", "duration_ms")]
# Preimenovanje stupaca
data <- data %>%
rename(
TrackID = track_id,
TrackName = track_name,
Artist = track_artist,
Popularity = track_popularity,
ReleaseDate = track_album_release_date,
Genre = playlist_genre,
DurationMin = duration_ms
)
# pretvorba trajanja u minute a ne milisekunde
data$DurationMin <- data$DurationMin / 60000
data$DurationMin <- round(data$DurationMin, 2)
# faktorizacija
data$Artist <- as.factor(data$Artist)
data$Genre <- as.factor(data$Genre)
# pretvorba na Date
#data$ReleaseDate <- ymd(data$ReleaseDate)
data$ReleaseDateParsed <- ymd(data$ReleaseDate, quiet = TRUE)
invalid_dates <- data %>% filter(is.na(ReleaseDateParsed))
# Prikaz redaka s nevažećim datumima
head(invalid_dates)
# Prikazivanje ažuriranog dataframe-a
#glimpse(data)
#head(data)
data <- read_csv("../data/spotify_songs.csv")
data <- data[c("track_id", "track_name", "track_artist", "track_popularity", "track_album_release_date", "playlist_genre", "duration_ms")]
# Preimenovanje stupaca
data <- data %>%
rename(
TrackID = track_id,
TrackName = track_name,
Artist = track_artist,
Popularity = track_popularity,
ReleaseYear = track_album_release_date,
Genre = playlist_genre,
DurationMin = duration_ms
)
# pretvorba trajanja u minute a ne milisekunde
data$DurationMin <- data$DurationMin / 60000
data$DurationMin <- round(data$DurationMin, 2)
# faktorizacija
data$Artist <- as.factor(data$Artist)
data$Genre <- as.factor(data$Genre)
# pretvorba na godinuIzdanja
data$ReleaseYear <- year(ymd(data$ReleaseYear))
# Prikazivanje ažuriranog dataframe-a
#glimpse(data)
head(data)
data <- read_csv("../data/spotify_songs.csv")
data <- data[c("track_id", "track_name", "track_artist", "track_popularity", "track_album_release_date", "playlist_genre", "duration_ms")]
# Preimenovanje stupaca
data <- data %>%
rename(
TrackID = track_id,
TrackName = track_name,
Artist = track_artist,
Popularity = track_popularity,
ReleaseYear = track_album_release_date,
Genre = playlist_genre,
DurationMin = duration_ms
)
# pretvorba trajanja u minute a ne milisekunde
data$DurationMin <- data$DurationMin / 60000
data$DurationMin <- round(data$DurationMin, 2)
# faktorizacija
data$Artist <- as.factor(data$Artist)
data$Genre <- as.factor(data$Genre)
# pretvorba na godinuIzdanja
data$ReleaseYear <- year(data$ReleaseYear)
year(ymd("2019"))
year(ymd("2019-3-4"))
year(ymd("2019"))
data <- read_csv("../data/spotify_songs.csv")
data <- data[c("track_id", "track_name", "track_artist", "track_popularity", "track_album_release_date", "playlist_genre", "duration_ms")]
# Preimenovanje stupaca
data <- data %>%
rename(
TrackID = track_id,
TrackName = track_name,
Artist = track_artist,
Popularity = track_popularity,
ReleaseYear = track_album_release_date,
Genre = playlist_genre,
DurationMin = duration_ms
)
# pretvorba trajanja u minute a ne milisekunde
data$DurationMin <- data$DurationMin / 60000
data$DurationMin <- round(data$DurationMin, 2)
# faktorizacija
data$Artist <- as.factor(data$Artist)
data$Genre <- as.factor(data$Genre)
# pretvorba na godinuIzdanja
#data$ReleaseYear <- year(data$ReleaseYear)
extractYear <- function(date) {
parsed_date <- ymd(date, quiet = TRUE)
if (any(!is.na(parsed_date))) {
return(year(parsed_date))
} else {
# Ako je datum u formatu samo godine (npr. "1999")
if (str_detect(date, "^\\d{4}$")) {
return(as.numeric(date))
} else {
return(NA) # Ako format nije prepoznat
}
}
}
# Primjena funkcije na ReleaseDate
data$ReleaseYear <- sapply(data$ReleaseYear, extractYear)
# Prikazivanje ažuriranog dataframe-a
#glimpse(data)
head(data)
data <- read_csv("../data/spotify_songs.csv")
data <- data[c("track_id", "track_name", "track_artist", "track_popularity", "track_album_release_date", "playlist_genre", "duration_ms")]
# Preimenovanje stupaca
data <- data %>%
rename(
TrackID = track_id,
TrackName = track_name,
Artist = track_artist,
Popularity = track_popularity,
ReleaseYear = track_album_release_date,
Genre = playlist_genre,
DurationMin = duration_ms
)
# pretvorba trajanja u minute a ne milisekunde
data$DurationMin <- data$DurationMin / 60000
data$DurationMin <- round(data$DurationMin, 2)
# faktorizacija
data$Artist <- as.factor(data$Artist)
data$Genre <- as.factor(data$Genre)
# pretvorba na godinuIzdanja
#data$ReleaseYear <- year(data$ReleaseYear)
extractYear <- function(date) {
parsed_date <- ymd(date, quiet = TRUE)
if (any(!is.na(parsed_date))) {
return(year(parsed_date))
} else {
# Ako je datum u formatu samo godine (npr. "1999")
if (str_detect(date, "^\\d{4}$")) {
return(as.numeric(date))
} else {
return(NA) # Ako format nije prepoznat
}
}
}
# Primjena funkcije na ReleaseDate
data$ReleaseYear <- sapply(data$ReleaseYear, extractYear)
# Prikazivanje ažuriranog dataframe-a
#glimpse(data)
data
data <- read_csv("../data/spotify_songs.csv")
data <- data[c("track_id", "track_name", "track_artist", "track_popularity", "track_album_release_date", "playlist_genre", "duration_ms")]
# Preimenovanje stupaca
data <- data %>%
rename(
TrackID = track_id,
TrackName = track_name,
Artist = track_artist,
Popularity = track_popularity,
ReleaseYear = track_album_release_date,
Genre = playlist_genre,
DurationMin = duration_ms
)
# pretvorba trajanja u minute a ne milisekunde
data$DurationMin <- data$DurationMin / 60000
data$DurationMin <- round(data$DurationMin, 2)
# faktorizacija
data$Artist <- as.factor(data$Artist)
data$Genre <- as.factor(data$Genre)
# pretvorba na godinuIzdanja
#data$ReleaseYear <- year(data$ReleaseYear)
extractYear <- function(date) {
parsed_date <- ymd(date, quiet = TRUE)
if (any(!is.na(parsed_date))) {
return(year(parsed_date))
} else {
# Ako je datum u formatu samo godine (npr. "1999")
if (str_detect(date, "^\\d{4}$")) {
return(as.numeric(date))
} else {
return(NA) # Ako format nije prepoznat
}
}
}
# Primjena funkcije na ReleaseDate
data$ReleaseYear <- sapply(data$ReleaseYear, extractYear)
data <- data %>% filter(!is.na(ReleaseYear))
# Prikazivanje ažuriranog dataframe-a
#glimpse(data)
data
# ucitvanje podataka
data <- read_csv("../data/spotify_songs.csv")
# odbacivanje nepotrebnih stupaca
data <- data[c("track_id", "track_name", "track_artist", "track_popularity", "track_album_release_date", "playlist_genre", "duration_ms")]
# Preimenovanje stupaca
data <- data %>%
rename(
TrackID = track_id,
TrackName = track_name,
Artist = track_artist,
Popularity = track_popularity,
ReleaseYear = track_album_release_date,
Genre = playlist_genre,
DurationMin = duration_ms
)
# pretvorba trajanja u minute iz milisekunda
data$DurationMin <- data$DurationMin / 60000
data$DurationMin <- round(data$DurationMin, 2)
# faktorizacija
data$Artist <- as.factor(data$Artist)
data$Genre <- as.factor(data$Genre)
# prilagodena funkcija za pretvaranje ReleaseYeara u tocnu godinu
# funkcija je morala biti prilagodena zbog nekonzistentnosti u skupu podataka
extractYear <- function(date) {
parsed_date <- ymd(date, quiet = TRUE)
if (any(!is.na(parsed_date))) {
return(year(parsed_date))
} else {
# Ako je datum u formatu samo godine (npr. "1999")
if (str_detect(date, "^\\d{4}$")) {
return(as.numeric(date))
} else {
return(NA) # Ako format nije prepoznat
}
}
}
# Primjena funkcije na ReleaseYear
data$ReleaseYear <- sapply(data$ReleaseYear, extractYear)
data <- data %>% filter(!is.na(ReleaseYear))
# Prikaz ažuriranog dataframe-a
head(data)
